{"ast":null,"code":"import Swal from \"sweetalert2\";\nimport { fetchConToken } from \"../helpers/fetch\";\nimport { prepareEvents } from \"../helpers/prepareEvents\";\nimport { types } from \"../types/types\";\nexport const eventStartAddNew = event => {\n  return async (dispatch, getState) => {\n    const {\n      uid,\n      name\n    } = getState().auth;\n\n    try {\n      const resp = await fetchConToken('events', event, 'POST');\n      const body = await resp.json();\n      console.log(body);\n\n      if (body.ok) {\n        event.id = body.evento.id;\n        event.user = {\n          _id: uid,\n          name: name\n        };\n        console.log(event);\n        dispatch(eventAddNew(event));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventAddNew = event => ({\n  type: types.eventAddNew,\n  payload: event\n});\n\nexport const eventSetActive = event => ({\n  type: types.eventSetActive,\n  payload: event\n});\nexport const eventClearActiveEvent = () => ({\n  type: types.eventClearActiveEvent\n});\nexport const eventStartUpdate = event => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken(`events/${event.id}`, event, 'PUT');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(eventUpdated(event));\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventUpdated = event => ({\n  type: types.eventUpdated,\n  payload: event\n});\n\nexport const eventStartDelete = event => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken(`events/${event.id}`, {}, 'DELETE');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(eventDelete());\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventDelete = event => ({\n  type: types.eventDelete\n});\n\nexport const eventStartLoading = () => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken('events');\n      const body = await resp.json();\n      const events = prepareEvents(body.eventos);\n      dispatch(eventLoaded(events));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventLoaded = events => ({\n  type: types.eventLoaded,\n  payload: events\n});","map":{"version":3,"sources":["/home/fabbry/Desktop/Mern-Calendari/calendar-app/src/actions/events.js"],"names":["Swal","fetchConToken","prepareEvents","types","eventStartAddNew","event","dispatch","getState","uid","name","auth","resp","body","json","console","log","ok","id","evento","user","_id","eventAddNew","error","type","payload","eventSetActive","eventClearActiveEvent","eventStartUpdate","eventUpdated","fire","msg","eventStartDelete","eventDelete","eventStartLoading","events","eventos","eventLoaded"],"mappings":"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","sourcesContent":["import Swal from \"sweetalert2\";\nimport { fetchConToken } from \"../helpers/fetch\";\nimport { prepareEvents } from \"../helpers/prepareEvents\";\nimport { types } from \"../types/types\";\n\nexport const eventStartAddNew = (event) => {\n    return async (dispatch, getState) => {\n\n        const { uid, name } = getState().auth;\n\n        try {\n            const resp = await fetchConToken('events', event, 'POST');\n            const body = await resp.json();\n\n            console.log(body)\n\n            if (body.ok) {\n                event.id = body.evento.id;\n                event.user = {\n                    _id: uid,\n                    name: name\n                }\n                console.log(event);\n                dispatch(eventAddNew(event));\n            }\n\n\n        } catch (error) {\n            console.log(error);\n        }\n\n\n\n    }\n}\n\nconst eventAddNew = (event) => ({\n    type: types.eventAddNew,\n    payload: event\n});\n\nexport const eventSetActive = (event) => ({\n    type: types.eventSetActive,\n    payload: event\n});\n\nexport const eventClearActiveEvent = () => ({\n    type: types.eventClearActiveEvent\n});\n\nexport const eventStartUpdate = (event) => {\n    return async (dispatch) => {\n\n        try {\n            const resp = await fetchConToken(`events/${event.id}`, event, 'PUT');\n            const body = await resp.json();\n\n            if (body.ok) {\n                dispatch(eventUpdated(event));\n            } else {\n                Swal.fire('Error', body.msg, 'error');\n            }\n\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n}\n\nconst eventUpdated = (event) => ({\n    type: types.eventUpdated,\n    payload: event\n});\n\n\nexport const eventStartDelete = (event) => {\n    return async (dispatch) => {\n\n        try {\n            const resp = await fetchConToken(`events/${event.id}`, {}, 'DELETE');\n            const body = await resp.json();\n\n            if (body.ok) {\n                dispatch(eventDelete());\n            } else {\n                Swal.fire('Error', body.msg, 'error');\n            }\n\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n};\n\n\n\n\nconst eventDelete = (event) => ({\n    type: types.eventDelete\n});\n\nexport const eventStartLoading = () => {\n    return async (dispatch) => {\n\n        try {\n\n            const resp = await fetchConToken('events');\n            const body = await resp.json();\n\n            const events = prepareEvents(body.eventos);\n            dispatch(eventLoaded(events));\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n}\n\nconst eventLoaded = (events) => ({\n    type: types.eventLoaded,\n    payload: events\n})"]},"metadata":{},"sourceType":"module"}