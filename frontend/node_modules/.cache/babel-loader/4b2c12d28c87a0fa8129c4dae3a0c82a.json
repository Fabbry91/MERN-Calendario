{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { types } from '../types/types';\nimport { fetchConToken } from '../helpers/fetch';\nimport { prepareEvents } from '../helpers/prepareEvents';\nexport const eventStartAddNew = event => {\n  return async (dispatch, getState) => {\n    const {\n      uid,\n      name\n    } = getState().auth;\n\n    try {\n      const resp = await fetchConToken('events', event, 'POST');\n      const body = await resp.json();\n      console.log(body);\n\n      if (body.ok) {\n        event.id = body.evento.id;\n        event.user = {\n          _id: uid,\n          name: name\n        };\n        console.log(event);\n        dispatch(eventAddNew(event));\n      }\n\n      eventStartLoading();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventAddNew = event => ({\n  type: types.eventAddNew,\n  payload: event\n});\n\nexport const eventSetActive = event => ({\n  type: types.eventSetActive,\n  payload: event\n});\nexport const eventClearActiveEvent = () => ({\n  type: types.eventClearActiveEvent\n});\nexport const eventStartUpdate = event => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken(`events/${event.id}`, event, 'PUT');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(eventUpdated(event));\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventUpdated = event => ({\n  type: types.eventUpdated,\n  payload: event\n});\n\nexport const eventStartDelete = () => {\n  return async (dispatch, getState) => {\n    const {\n      id\n    } = getState().calendar.activeEvent;\n\n    try {\n      const resp = await fetchConToken(`events/${id}`, {}, 'DELETE');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(eventDeleted());\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventDeleted = () => ({\n  type: types.eventDeleted\n});\n\nexport const eventStartLoading = () => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken('events');\n      const body = await resp.json();\n      const events = prepareEvents(body.eventos);\n      dispatch(eventLoaded(events));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventLoaded = events => ({\n  type: types.eventLoaded,\n  payload: events\n});\n\nexport const eventLogout = () => ({\n  type: types.eventLogout\n});","map":{"version":3,"sources":["/home/fabbry/Desktop/Mern-Calendari/calendar-app/src/actions/events.js"],"names":["Swal","types","fetchConToken","prepareEvents","eventStartAddNew","event","dispatch","getState","uid","name","auth","resp","body","json","console","log","ok","id","evento","user","_id","eventAddNew","eventStartLoading","error","type","payload","eventSetActive","eventClearActiveEvent","eventStartUpdate","eventUpdated","fire","msg","eventStartDelete","calendar","activeEvent","eventDeleted","events","eventos","eventLoaded","eventLogout"],"mappings":"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","sourcesContent":["import Swal from 'sweetalert2';\n\nimport { types } from '../types/types';\nimport { fetchConToken } from '../helpers/fetch';\nimport { prepareEvents } from '../helpers/prepareEvents';\n\n\nexport const eventStartAddNew = (event) => {\n    return async (dispatch, getState) => {\n\n        const { uid, name } = getState().auth;\n\n        try {\n            const resp = await fetchConToken('events', event, 'POST');\n            const body = await resp.json();\n\n            console.log(body)\n\n            if (body.ok) {\n                event.id = body.evento.id;\n                event.user = {\n                    _id: uid,\n                    name: name\n                }\n                console.log(event);\n                dispatch(eventAddNew(event));\n            }\n\n            eventStartLoading();\n\n\n        } catch (error) {\n            console.log(error);\n        }\n\n\n\n    }\n}\n\n\n\nconst eventAddNew = (event) => ({\n    type: types.eventAddNew,\n    payload: event\n});\n\nexport const eventSetActive = (event) => ({\n    type: types.eventSetActive,\n    payload: event\n});\n\nexport const eventClearActiveEvent = () => ({ type: types.eventClearActiveEvent });\n\n\n\nexport const eventStartUpdate = (event) => {\n    return async (dispatch) => {\n\n        try {\n            const resp = await fetchConToken(`events/${event.id}`, event, 'PUT');\n            const body = await resp.json();\n\n            if (body.ok) {\n                dispatch(eventUpdated(event));\n            } else {\n                Swal.fire('Error', body.msg, 'error');\n            }\n\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n}\n\nconst eventUpdated = (event) => ({\n    type: types.eventUpdated,\n    payload: event\n});\n\n\nexport const eventStartDelete = () => {\n    return async (dispatch, getState) => {\n\n        const { id } = getState().calendar.activeEvent;\n        try {\n            const resp = await fetchConToken(`events/${id}`, {}, 'DELETE');\n            const body = await resp.json();\n\n            if (body.ok) {\n                dispatch(eventDeleted());\n            } else {\n                Swal.fire('Error', body.msg, 'error');\n            }\n\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n}\n\n\nconst eventDeleted = () => ({ type: types.eventDeleted });\n\n\nexport const eventStartLoading = () => {\n    return async (dispatch) => {\n\n        try {\n\n            const resp = await fetchConToken('events');\n            const body = await resp.json();\n\n            const events = prepareEvents(body.eventos);\n            dispatch(eventLoaded(events));\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n}\n\nconst eventLoaded = (events) => ({\n    type: types.eventLoaded,\n    payload: events\n})\n\nexport const eventLogout = () => ({ type: types.eventLogout });"]},"metadata":{},"sourceType":"module"}