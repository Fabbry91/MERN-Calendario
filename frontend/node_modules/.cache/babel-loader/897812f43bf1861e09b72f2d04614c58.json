{"ast":null,"code":"import { fetchConToken, fetchSinToken } from \"../helpers/fetch\";\nimport { types } from \"../types/types\";\nimport Swal from 'sweetalert2';\nimport { eventLogout } from \"./events\";\nexport const startLoging = (email, password) => {\n  return async dispatch => {\n    const resp = await fetchSinToken('auth', {\n      email,\n      password\n    }, 'POST');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      Swal.fire('Error', body.msg, 'error');\n    }\n  };\n};\nexport const startRegister = (email, password, name) => {\n  return async dispatch => {\n    const resp = await fetchSinToken('auth/new', {\n      email,\n      password,\n      name\n    }, 'POST');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      Swal.fire('Error', body.msg, 'error');\n    }\n  };\n};\nexport const startChecking = () => {\n  return async dispatch => {\n    const resp = await fetchConToken('auth/renew');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      dispatch(checkingFinish());\n    }\n  };\n};\n\nconst checkingFinish = () => ({\n  type: types.authCheckingFinish\n});\n\nconst login = user => ({\n  type: types.authLogin,\n  payload: user\n});\n\nexport const startLogout = () => {\n  return dispatch => {\n    localStorage.clear();\n    dispatch(eventLogout());\n    dispatch(logout());\n  };\n};\n\nconst logout = () => ({\n  type: types.authLogout\n});","map":{"version":3,"sources":["/home/fabbry/Desktop/Mern-Calendari/calendar-app/src/actions/auth.js"],"names":["fetchConToken","fetchSinToken","types","Swal","eventLogout","startLoging","email","password","dispatch","resp","body","json","ok","localStorage","setItem","token","Date","getTime","login","uid","name","fire","msg","startRegister","startChecking","checkingFinish","type","authCheckingFinish","user","authLogin","payload","startLogout","clear","logout","authLogout"],"mappings":"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","sourcesContent":["import { fetchConToken, fetchSinToken } from \"../helpers/fetch\"\nimport { types } from \"../types/types\";\nimport Swal from 'sweetalert2'\nimport { eventLogout } from \"./events\";\n\n\n\nexport const startLoging = (email, password) => {\n    return async (dispatch) => {\n        const resp = await fetchSinToken('auth', { email, password }, 'POST');\n        const body = await resp.json();\n\n        if (body.ok) {\n            localStorage.setItem('token', body.token);\n            localStorage.setItem('token-init-date', new Date().getTime());\n\n            dispatch(login({\n                uid: body.uid,\n                name: body.name\n            }))\n        } else {\n            Swal.fire('Error', body.msg, 'error')\n        }\n    }\n\n}\n\nexport const startRegister = (email, password, name) => {\n    return async (dispatch) => {\n\n        const resp = await fetchSinToken('auth/new', { email, password, name }, 'POST');\n        const body = await resp.json();\n\n        if (body.ok) {\n            localStorage.setItem('token', body.token);\n            localStorage.setItem('token-init-date', new Date().getTime());\n\n            dispatch(login({\n                uid: body.uid,\n                name: body.name\n            }))\n        } else {\n            Swal.fire('Error', body.msg, 'error');\n        }\n\n    }\n}\n\nexport const startChecking = () => {\n    return async (dispatch) => {\n        const resp = await fetchConToken('auth/renew');\n        const body = await resp.json();\n\n        if (body.ok) {\n            localStorage.setItem('token', body.token);\n            localStorage.setItem('token-init-date', new Date().getTime());\n\n            dispatch(login({\n                uid: body.uid,\n                name: body.name\n            }))\n        } else {\n            dispatch(checkingFinish());\n        }\n\n    }\n\n}\n\nconst checkingFinish = () => ({ type: types.authCheckingFinish });\n\nconst login = (user) => ({\n    type: types.authLogin,\n    payload: user\n})\n\nexport const startLogout = () => {\n    return (dispatch) => {\n\n        localStorage.clear();\n        dispatch(eventLogout());\n        dispatch(logout());\n    }\n}\n\nconst logout = () => ({ type: types.authLogout })"]},"metadata":{},"sourceType":"module"}